diff --git a/.gitignore b/.gitignore
index b1d8932..ab90610 100644
--- a/.gitignore
+++ b/.gitignore
@@ -20,3 +20,5 @@ myapi.key
 xv6.out*
 .vagrant/
 submissions/
+.vscode/*
+.gitignore
diff --git a/Makefile b/Makefile
index f0beb51..49dfd51 100644
--- a/Makefile
+++ b/Makefile
@@ -149,7 +149,8 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
-
+	$U/_trace\
+	$U/_sysinfotest\
 
 
 ifeq ($(LAB),trap)
diff --git a/kernel/defs.h b/kernel/defs.h
index 4b9bbc0..8c6e633 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -63,6 +63,7 @@ void            ramdiskrw(struct buf*);
 void*           kalloc(void);
 void            kfree(void *);
 void            kinit(void);
+uint64          get_freemem(void);
 
 // log.c
 void            initlog(int, struct superblock*);
@@ -104,6 +105,7 @@ void            yield(void);
 int             either_copyout(int user_dst, uint64 dst, void *src, uint64 len);
 int             either_copyin(void *dst, int user_src, uint64 src, uint64 len);
 void            procdump(void);
+uint64          get_nproc(void);
 
 // swtch.S
 void            swtch(struct context*, struct context*);
diff --git a/kernel/kalloc.c b/kernel/kalloc.c
index fa6a0ac..eb7c9b0 100644
--- a/kernel/kalloc.c
+++ b/kernel/kalloc.c
@@ -69,7 +69,6 @@ void *
 kalloc(void)
 {
   struct run *r;
-
   acquire(&kmem.lock);
   r = kmem.freelist;
   if(r)
@@ -80,3 +79,21 @@ kalloc(void)
     memset((char*)r, 5, PGSIZE); // fill with junk
   return (void*)r;
 }
+
+//get the number of free memory in this process
+uint64
+get_freemem(void)
+{
+  uint64 num = 0;
+  struct run *r;
+  acquire(&kmem.lock);
+  r = kmem.freelist;
+  while(r)
+  {
+    num++;
+    r = r->next;
+  }
+  release(&kmem.lock);
+  num = num*PGSIZE;
+  return num;
+}
diff --git a/kernel/proc.c b/kernel/proc.c
index 6afafa1..2667fe1 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -277,6 +277,9 @@ fork(void)
 
   np->parent = p;
 
+  //Copy the parent mask
+  np->mask = p->mask;
+
   // copy saved user registers.
   *(np->trapframe) = *(p->trapframe);
 
@@ -693,3 +696,16 @@ procdump(void)
     printf("\n");
   }
 }
+
+
+//get the number of processes
+uint64
+get_nproc(void)
+{
+  uint64 num = 0;
+  struct proc *p;
+  for(p = proc;p < &proc[NPROC];p++)
+    if(p->state != UNUSED) 
+      num++;
+  return num;
+}
diff --git a/kernel/proc.h b/kernel/proc.h
index 9c16ea7..13342d9 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -21,7 +21,7 @@ struct context {
 // Per-CPU state.
 struct cpu {
   struct proc *proc;          // The process running on this cpu, or null.
-  struct context context;     // swtch() here to enter scheduler().
+  struct context context;     // switch() here to enter scheduler().
   int noff;                   // Depth of push_off() nesting.
   int intena;                 // Were interrupts enabled before push_off()?
 };
@@ -103,4 +103,5 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+  uint64 mask;                 //Process mask of systemcall
 };
diff --git a/kernel/syscall.c b/kernel/syscall.c
index c1b3670..5d0589a 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -104,6 +104,8 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_wait(void);
 extern uint64 sys_write(void);
 extern uint64 sys_uptime(void);
+extern uint64 sys_trace(void);
+extern uint64 sys_sysinfo(void);
 
 static uint64 (*syscalls[])(void) = {
 [SYS_fork]    sys_fork,
@@ -127,6 +129,34 @@ static uint64 (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_trace]   sys_trace,
+[SYS_sysinfo] sys_sysinfo,
+};
+
+static char* systemcall_name[] = {
+[SYS_fork]    "fork",
+[SYS_exit]    "exit",
+[SYS_wait]    "wait",
+[SYS_pipe]    "pipe",
+[SYS_read]    "read",
+[SYS_kill]    "kill",
+[SYS_exec]    "exec",
+[SYS_fstat]   "fstat",
+[SYS_chdir]   "chdir",
+[SYS_dup]     "dup",
+[SYS_getpid]  "getpid",
+[SYS_sbrk]    "sbrk",
+[SYS_sleep]   "sleep",
+[SYS_uptime]  "uptime",
+[SYS_open]    "open",
+[SYS_write]   "write",
+[SYS_mknod]   "mknod",
+[SYS_unlink]  "unlink",
+[SYS_link]    "link",
+[SYS_mkdir]   "mkdir",
+[SYS_close]   "close",
+[SYS_trace]   "trace",
+[SYS_sysinfo] "sysinfo",
 };
 
 void
@@ -138,6 +168,7 @@ syscall(void)
   num = p->trapframe->a7;
   if(num > 0 && num < NELEM(syscalls) && syscalls[num]) {
     p->trapframe->a0 = syscalls[num]();
+    if((((p->mask)>>31)&1)&&(p->mask>>num)&1) printf("%d: syscall %s -> %d\n",p->pid,systemcall_name[num],p->trapframe->a0);
   } else {
     printf("%d %s: unknown sys call %d\n",
             p->pid, p->name, num);
diff --git a/kernel/syscall.h b/kernel/syscall.h
index bc5f356..d3333ac 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -8,15 +8,17 @@
 #define SYS_exec    7
 #define SYS_fstat   8
 #define SYS_chdir   9
-#define SYS_dup    10
-#define SYS_getpid 11
-#define SYS_sbrk   12
-#define SYS_sleep  13
-#define SYS_uptime 14
-#define SYS_open   15
-#define SYS_write  16
-#define SYS_mknod  17
-#define SYS_unlink 18
-#define SYS_link   19
-#define SYS_mkdir  20
-#define SYS_close  21
+#define SYS_dup     10
+#define SYS_getpid  11
+#define SYS_sbrk    12
+#define SYS_sleep   13
+#define SYS_uptime  14
+#define SYS_open    15
+#define SYS_write   16
+#define SYS_mknod   17
+#define SYS_unlink  18
+#define SYS_link    19
+#define SYS_mkdir   20
+#define SYS_close   21
+#define SYS_trace   22
+#define SYS_sysinfo 23
\ No newline at end of file
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index e8bcda9..d74cb70 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -6,6 +6,7 @@
 #include "memlayout.h"
 #include "spinlock.h"
 #include "proc.h"
+#include "sysinfo.h"
 
 uint64
 sys_exit(void)
@@ -95,3 +96,33 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+//set the mask that is the symbol of systemcall invoking
+uint64
+sys_trace(void)
+{
+  int mask;
+  if(argint(0,&mask)<0)
+    return -1;
+  mask |= 1<<31;
+  
+  myproc()->mask = mask;
+  return 0;
+}
+
+//collect information about system
+//amount freedom and number of process
+uint64
+sys_sysinfo(void)
+{
+  uint64 addr;
+  struct sysinfo sinfo;
+  
+  if(argaddr(0,&addr)<0)
+    return -1;
+  sinfo.freemem = get_freemem();
+  sinfo.nproc = get_nproc();
+  if(copyout(myproc()->pagetable,addr,(char*)&sinfo,sizeof(sinfo))<0)
+    return -1;
+  return 0;
+}
\ No newline at end of file
diff --git a/time.txt b/time.txt
new file mode 100644
index 0000000..9a03714
--- /dev/null
+++ b/time.txt
@@ -0,0 +1 @@
+10
\ No newline at end of file
diff --git a/user/user.h b/user/user.h
index b71ecda..251b5c0 100644
--- a/user/user.h
+++ b/user/user.h
@@ -23,6 +23,9 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int trace(int);
+struct sysinfo;
+int sysinfo(struct sysinfo*);
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/user/usys.pl b/user/usys.pl
index 01e426e..353a1f8 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,3 +36,5 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+entry("trace");
+entry("sysinfo");
\ No newline at end of file
